#!/usr/bin/swift sh

import Foundation

let names = [
    "___FILEBASENAME___.h",
    "___FILEBASENAME___.m",
    "___VARIABLE_extendedClass:identifier___+___VARIABLE_productName:identifier___.h",
    "___VARIABLE_extendedClass:identifier___+___VARIABLE_productName:identifier___.m",
]

let suffixes = [
    "Objective-C",
    "NSObject",
    "xctemplate"
]

extension URL {
    var isDirectory: Bool {
       let answer = (try? resourceValues(forKeys: [.isDirectoryKey]))?.isDirectory == true
        return answer
    }
    
    var shouldModify: Bool {
        if isDirectory {
            return suffixes.first(where: { lastPathComponent.hasSuffix($0) }) != nil
        }
        
        return names.first(where: { lastPathComponent.hasSuffix($0) }) != nil
    }
}

private func modify(file: URL) {
    let content = "//___FILEHEADER___"
    let replacement = "//___FILEHEADEROBJC___"

    guard file.shouldModify else { return }

    do {
        let data = try String(contentsOf: file)
        if data.hasPrefix(content) {
            print(file)
            let newData = data.replacingOccurrences(of: content, with: replacement)
            try newData.write(to: file, atomically: true, encoding: .utf8)
        }
    } catch {
        print(error)
    }
}

private func process(dir: URL) {
    guard dir.isDirectory else {
        modify(file: dir)
        return
    }
    
    guard let subDirs = try? FileManager.default
        .contentsOfDirectory(at: dir, includingPropertiesForKeys: nil)
    else {
        return
    }
    subDirs.filter { url in
        return url.shouldModify
    }.forEach { dir in
        process(dir: dir)
    }
}

let args = CommandLine.arguments
if args.count > 1 {
    let rootDir = args[1]
    
    let dir = URL(fileURLWithPath: rootDir)
    process(dir: dir)
}
